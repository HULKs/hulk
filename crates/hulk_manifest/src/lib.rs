use source_analyzer::{
    cyclers::{CyclerKind, Cyclers},
    error::Error,
    manifest::{CyclerManifest, FrameworkManifest},
};

pub fn collect_hulk_cyclers() -> Result<Cyclers, Error> {
    let manifest = FrameworkManifest {
        cyclers: vec![
            CyclerManifest {
                name: "Vision",
                kind: CyclerKind::Perception,
                instances: vec!["Top", "Bottom"],
                setup_nodes: vec!["vision::image_receiver"],
                nodes: vec![
                    "vision::ball_detection",
                    "vision::calibration_measurement_provider",
                    "vision::camera_matrix_extractor",
                    "vision::feet_detection",
                    "vision::field_border_detection",
                    "vision::image_segmenter",
                    "vision::limb_projector",
                    "vision::line_detection",
                    "vision::perspective_grid_candidates_provider",
                    "vision::segment_filter",
                ],
            },
            CyclerManifest {
                name: "ObjectDetection",
                kind: CyclerKind::Perception,
                instances: vec!["Top"],
                setup_nodes: vec!["vision::image_receiver"],
                nodes: vec![
                    "object_detection::pose_detection",
                    "object_detection::pose_filter",
                    "object_detection::pose_interpretation",
                ],
            },
            CyclerManifest {
                name: "Control",
                kind: CyclerKind::RealTime,
                instances: vec![""],
                setup_nodes: vec!["control::sensor_data_receiver"],
                nodes: vec![
                    "control::active_vision",
                    "control::ball_filter",
                    "control::ball_state_composer",
                    "control::ball_contact_counter",
                    "control::behavior::node",
                    "control::button_filter",
                    "control::calibration_controller",
                    "control::camera_matrix_calculator",
                    "control::center_of_mass_provider",
                    "control::fall_state_estimation",
                    "control::filtered_game_controller_state_timer",
                    "control::foot_bumper_filter",
                    "control::game_controller_filter",
                    "control::game_controller_state_filter",
                    "control::ground_contact_detector",
                    "control::ground_provider",
                    "control::kick_selector",
                    "control::kinematics_provider",
                    "control::led_status",
                    "control::localization",
                    "control::motion::animation",
                    "control::motion::arms_up_squat",
                    "control::motion::arms_up_stand",
                    "control::motion::command_sender",
                    "control::motion::condition_input_provider",
                    "control::motion::dispatching_interpolator",
                    "control::motion::fall_protector",
                    "control::motion::head_motion",
                    "control::motion::jump_left",
                    "control::motion::jump_right",
                    "control::motion::center_jump",
                    "control::motion::look_around",
                    "control::motion::look_at",
                    "control::motion::motion_selector",
                    "control::motion::obstacle_avoiding_arms",
                    "control::motion::motor_commands_collector",
                    "control::motion::motor_commands_optimizer",
                    "control::motion::sit_down",
                    "control::motion::stand_up_back",
                    "control::motion::stand_up_front",
                    "control::motion::stand_up_sitting",
                    "control::motion::step_planner",
                    "control::motion::walk_manager",
                    "control::motion::wide_stance",
                    "control::motion::walking_engine",
                    "control::obstacle_filter",
                    "control::odometry",
                    "control::orientation_filter",
                    "control::penalty_shot_direction_estimation",
                    "control::primary_state_filter",
                    "control::role_assignment",
                    "control::rule_obstacle_composer",
                    "control::referee_position_provider",
                    "control::referee_pose_detection_filter",
                    "control::sacrificial_lamb",
                    "control::sole_pressure_filter",
                    "control::sonar_filter",
                    "control::search_suggestor",
                    "control::support_foot_estimation",
                    "control::time_to_reach_kick_position",
                    "control::whistle_filter",
                    "control::world_state_composer",
                    "control::zero_moment_point_provider",
                ],
            },
            CyclerManifest {
                name: "SplNetwork",
                kind: CyclerKind::Perception,
                instances: vec![""],
                setup_nodes: vec!["spl_network::message_receiver"],
                nodes: vec!["spl_network::message_filter"],
            },
            CyclerManifest {
                name: "Audio",
                kind: CyclerKind::Perception,
                instances: vec![""],
                setup_nodes: vec!["audio::microphone_recorder"],
                nodes: vec!["audio::whistle_detection"],
            },
        ],
    };

    let root = "..";
    Cyclers::try_from_manifest(manifest, root)
}
